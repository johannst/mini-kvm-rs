searchState.loadedDescShard("kvm_rs", 0, "Strong type representing physical addresses.\nWrapper to safely allocate memory for guest VMs.\nDefinitions of KVM capabilities.\nFree underlying memory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKVM system ioctls.\nDefinitions of the system header <code>&lt;linux/kvm.h&gt;</code>.\nLoad the bytes stored in <code>data</code> into memory at physical …\nAllocate a zero-initialized memory region of <code>len</code> bytes.\nVCPU system ioctls.\nVM system ioctls.\nAllocate a zero-initialized memory region of <code>len</code> bytes and …\n<code>x86_64</code> flags and bitfields.\nDefinition of capabilities that return a bool value …\nDefinition of capabilities that return an integer value …\nCheck if capabilities can be queried on VM fds (…\nGet the possible max VPCUs (<code>KVM_CAP_MAX_VCPUS</code>).\nGet the recommended max VPCUs (<code>KVM_CAP_NR_VCPUS</code>).\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrapper for <code>/dev/kvm</code> ioctls.\nCheck availability of an extension with the …\nCheck availability of an extension with the …\nCreate a new virtual machine with the <code>KVM_CREATE_VM</code> ioctl. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOpen the <code>/dev/kvm</code> device.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExit reasons for the <code>Vcpu::run</code> function.\nWrapper for VCPU ioctls.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the debug registers with the <code>KVM_GET_DEBUGREGS</code> ioctl …\nGet the general purpose registers with the <code>KVM_GET_REGS</code> …\nGet the special registers with the <code>KVM_GET_SREGS</code> ioctl in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun the guest VCPU with the <code>KVM_RUN</code> ioctl until it exits …\nSet the debug registers with the <code>KVM_SET_DEBUGREGS</code> ioctl …\nSet the general purpose registers with the <code>KVM_SET_REGS</code> …\nEnable or disable guest single steppig (debug) with the …\nSet the special registers with the <code>KVM_SET_SREGS</code> ioctl in …\nWrapper for VM ioctls.\nCreate a new virtual cpu with the <code>KVM_CREATE_VCPU</code> ioctl. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMap memory from userspace into the VM as <code>guest physical</code> …\nAlignment Mask.\nCachine disable.\nEmulation.\nExtension Type.\nMonitor Coprocessor.\nNumeric Error.\nNot Write-Torugh.\nProtection Enable.\nPaging.\nTask Switched.\nWrite Protect.\nMask for physical base address of paging structure.\nPage-level Cache Disable.\nPage-level Write-Through.\n57-bit Linear Addresses.\nPhysical Address Extenstion.\nLong Mode Active (readonly).\nLong Mode Enable.\nExtended Feature Enable Register MSR number.\nPage entry present.\nPage region read/write.\nAlignment check.\nAdjust flag.\nCarry flag.\nDirection flag.\nSign flag.\nI/O privilege level.\nOverflow flag.\nParity flag.\nSign flag.\nTrap flag.\nZero flag.\nTable index.\nRequested privilege level.\nTable indicator.")